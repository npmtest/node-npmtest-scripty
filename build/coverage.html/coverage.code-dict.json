{"/home/travis/build/npmtest/node-npmtest-scripty/test.js":"/* istanbul instrument in package npmtest_scripty */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-scripty/lib.npmtest_scripty.js":"/* istanbul instrument in package npmtest_scripty */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_scripty = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_scripty = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-scripty/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-scripty && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_scripty */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_scripty\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_scripty.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_scripty.rollup.js'] =\n            local.assetsDict['/assets.npmtest_scripty.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_scripty.__dirname + '/lib.npmtest_scripty.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-scripty/node_modules/scripty/lib/scripty.js":"var optionify = require('./optionify')\nvar resolveScript = require('./resolve-script')\nvar run = require('./run')\n\nmodule.exports = optionify(function scripty (npmLifecycle, options, cb) {\n  resolveScript(npmLifecycle, options.resolve, function (er, scriptFiles) {\n    if (er) return cb(er)\n    run(scriptFiles, options, cb)\n  })\n}, {\n  userArgs: [],\n  parallel: false,\n  dryRun: false,\n  silent: false,\n  spawn: {},\n  resolve: {}\n})\n","/home/travis/build/npmtest/node-npmtest-scripty/node_modules/scripty/lib/optionify.js":"var _ = require('lodash')\n\nvar NULL_CB = function () {}\nmodule.exports = function (rawFunc, defaultOptions) {\n  return function (mainArg, userOptions, cb) {\n    if (typeof userOptions === 'function') {\n      cb = userOptions\n    }\n    if (!cb) {\n      cb = NULL_CB\n    }\n    var fullOptions = _.defaultsDeep({}, userOptions, defaultOptions)\n    return rawFunc(mainArg, fullOptions, cb)\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-scripty/node_modules/scripty/lib/resolve-script/index.js":"var globPatterns = require('./glob-patterns')\nvar findExecutables = require('./find-executables')\nvar scriptDirs = require('./script-dirs')\n\nmodule.exports = function (name, options, cb) {\n  var dirs = scriptDirs(options)\n  var userGlob = globPatterns(dirs.userDir, name)\n  findExecutables(userGlob, function (er, userPaths) {\n    if (userPaths.length > 0) {\n      cb(er, userPaths)\n    } else {\n      var ourGlob = globPatterns(dirs.ourDir, name)\n      findExecutables(ourGlob, function (er, ourPaths) {\n        if (ourPaths.length > 0) {\n          cb(er, ourPaths)\n        } else {\n          cb(new Error(\n            'Error: scripty - no script found for npm lifecycle \"' + name + '\"' +\n            ' matching either \"' + userGlob + '\" or \"' + ourGlob + '\". Either' +\n            ' define a script or remove \"scripty\" from \"' + name + '\" under' +\n            ' \"scripts\" in your package.json.'\n          ), null)\n        }\n      })\n    }\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-scripty/node_modules/scripty/lib/resolve-script/glob-patterns.js":"var path = require('path')\n\nmodule.exports = function (dir1, dir2) {\n  var expanded = path.resolve(dir1, path.join.apply(this, dir2.split(':')))\n\n  return [\n    // exact file match (+ any same-named extensions)\n    expanded + '+(|.*)',\n    // a nested index file match (+ any same-named extensions)\n    path.join(expanded, 'index+(|.*)'),\n    // any nested files at all\n    path.join(expanded, '*')\n  ]\n}\n","/home/travis/build/npmtest/node-npmtest-scripty/node_modules/scripty/lib/resolve-script/find-executables.js":"var _ = require('lodash')\nvar globFirst = require('./glob-first')\nvar path = require('path')\nvar async = require('async')\n\nvar isExecutable = require('./is-executable')\n\nmodule.exports = function (patterns, cb) {\n  globFirst(patterns, function (er, results) {\n    if (er) return cb(er)\n    async.map(results, function (result, cb) {\n      isExecutable(result, function (er, itIsExecutable) {\n        if (itIsExecutable) {\n          cb(er, path.resolve(result))\n        } else {\n          console.warn(\n            'Warning: scripty - ignoring script \"' + result + '\" because it' +\n            ' was not executable. Run `chmod +x \"' + result + '\" if you want' +\n            ' scripty to run it.'\n          )\n          cb(er, undefined)\n        }\n      })\n    }, function (er, results) {\n      cb(er, _.compact(results))\n    })\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-scripty/node_modules/scripty/lib/resolve-script/glob-first.js":"var path = require('path')\nvar _ = require('lodash')\nvar glob = require('glob')\nvar async = require('async')\n\nmodule.exports = function (globPatterns, cb) {\n  async.map(globPatterns, function (globPattern, cb) {\n    glob(globPattern, {nodir: true}, cb)\n  }, function (er, result) {\n    if (er) return cb(er)\n    var firstMatches = _(result).reject(_.isEmpty).first()\n    cb(er, _.map(firstMatches, function (f) {\n      return path.resolve(f)\n    }))\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-scripty/node_modules/scripty/lib/resolve-script/is-executable.js":"var fs = require('fs')\n\nmodule.exports = function (path, cb) {\n  if (process.platform === 'win32') return cb(null, true)\n  fs.stat(path, function (er, stats) {\n    if (er) return cb(er)\n    var mode = stats.mode\n\n    var owner = mode >> 6\n    var group = (mode << 3) >> 6\n    var others = (mode << 6) >> 6\n\n    cb(er, !!(owner & 1) || !!(group & 1) || !!(others & 1))\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-scripty/node_modules/scripty/lib/resolve-script/script-dirs.js":"var path = require('path')\nvar fs = require('fs')\n\nmodule.exports = function (options, platform) {\n  platform = platform || process.platform\n  return {\n    userDir: find(process.cwd(), options, 'scripts', platform),\n    ourDir: find(path.resolve(__dirname, '../..'), options, 'builtIn', platform)\n  }\n}\n\nfunction find (base, options, key, platform) {\n  if (platform === 'win32' && options[key + 'Win']) {\n    return options[key + 'Win']\n  } else if (platform === 'win32' && fs.existsSync(path.resolve(base, 'scripts-win'))) {\n    return path.resolve(base, 'scripts-win')\n  } else if (options[key]) {\n    return options[key]\n  } else {\n    return path.resolve(base, 'scripts')\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-scripty/node_modules/scripty/lib/run/index.js":"var _ = require('lodash')\n\nvar dryRun = require('./dry-run')\nvar commandify = require('./commandify')\nvar spawnScript = require('./spawn-script')\nvar all = require('./all')\n\nmodule.exports = function (scriptFiles, options, cb) {\n  if (options.dryRun) return dryRun(scriptFiles, cb)\n\n  var commands = commandify(spawnScript, scriptFiles, options)\n  all(commands, options.parallel, function (er, codes) {\n    cb(er, _.last(codes))\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-scripty/node_modules/scripty/lib/run/dry-run.js":"var _ = require('lodash')\n\nvar printScript = require('./print-script')\nvar log = require('./log')\n\nmodule.exports = function (scriptFiles, cb) {\n  log('This is a dry run. Executed scripts would be:\\n')\n  _.map(scriptFiles, printScript)\n  cb(null, 0)\n}\n","/home/travis/build/npmtest/node-npmtest-scripty/node_modules/scripty/lib/run/print-script.js":"var fs = require('fs')\nvar _ = require('lodash')\n\nvar log = require('./log')\n\nmodule.exports = function (scriptFile) {\n  log('Executing \"' + scriptFile + '\":\\n')\n  var script = read(scriptFile)\n  if (script) {\n    log(_.map(script.split('\\n'), function (line) {\n      return '> ' + line\n    }).join('\\n') + '\\n\\n')\n  }\n}\n\nfunction read (scriptFile) {\n  try {\n    return fs.readFileSync(scriptFile).toString()\n  } catch (e) {\n    log(\n      'Error: scripty - failed trying to read \"' + scriptFile + '\":\\n\\n' +\n      e.message\n    )\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-scripty/node_modules/scripty/lib/run/log.js":"var _ = require('lodash')\n\nvar isSilent = false\nvar output = ''\n\nmodule.exports = function () {\n  if (!isSilent) {\n    if (_.startsWith(arguments[0], 'Error:')) {\n      console.error.apply(this, arguments)\n    } else {\n      console.log.apply(this, arguments)\n    }\n  } else {\n    output += _.toArray(arguments).join(' ') + '\\n'\n  }\n}\n\nmodule.exports.shush = function () {\n  isSilent = true\n}\n\nmodule.exports.read = function () {\n  return output\n}\n\nmodule.exports.reset = function () {\n  isSilent = false\n  output = ''\n}\n","/home/travis/build/npmtest/node-npmtest-scripty/node_modules/scripty/lib/run/commandify.js":"var _ = require('lodash')\n\nmodule.exports = function (func, items, options) {\n  return _.map(items, function (item) {\n    return function (cb) {\n      func(item, options, cb)\n    }\n  })\n}\n\n","/home/travis/build/npmtest/node-npmtest-scripty/node_modules/scripty/lib/run/spawn-script.js":"var _ = require('lodash')\nvar printScript = require('./print-script')\nvar spawn = require('child_process').spawn\n\nmodule.exports = function (scriptFile, options, cb) {\n  if (!options.silent) printScript(scriptFile)\n  var userArgs = options.userArgs\n  var child = spawn(scriptFile, userArgs, options.spawn)\n  child.on('close', function (code) {\n    if (code !== 0) {\n      cb(new Error(\n        'Error: scripty - script \"fail\" failed by exiting ' +\n        'with a non-zero code (' + code + ').'\n      ), code)\n    } else {\n      cb(null, code)\n    }\n  })\n  _.invoke(options, 'spawn.tap', child)\n}\n\n","/home/travis/build/npmtest/node-npmtest-scripty/node_modules/scripty/lib/run/all.js":"var async = require('async')\n\nmodule.exports = function (commands, parallel, cb) {\n  var runner = async[parallel ? 'parallel' : 'series']\n  runner(commands, cb)\n}\n\n","/home/travis/build/npmtest/node-npmtest-scripty/node_modules/scripty/lib/load-option.js":"var _ = require('lodash')\n\nmodule.exports = function loadOption (name) {\n  var env = process.env['SCRIPTY_' + _.snakeCase(name).toUpperCase()]\n\n  if (env === 'true') return true\n  if (env === 'false') return false\n  if (env) return env\n\n  var pkg = process.env['npm_package_scripty_' + name]\n\n  if (pkg === 'true') return true\n  if (pkg === 'false') return false\n  if (pkg) return pkg\n}\n"}